{"version":3,"sources":["./node_modules/@carbon/icons-angular/lib/application/32.js","./node_modules/@carbon/icons-angular/lib/globe/32.js","./node_modules/@carbon/icons-angular/lib/person--favorite/32.js","./src/app/home/landing-page/landing-page.component.html","./src/app/info/info-card/info-card.component.html","./src/app/info/info-section/info-section.component.html","./src/app/home/home-routing.module.ts","./src/app/home/home.module.ts","./src/app/home/landing-page/landing-page.component.scss","./src/app/home/landing-page/landing-page.component.ts","./src/app/info/info-card/info-card.component.scss","./src/app/info/info-card/info-card.component.ts","./src/app/info/info-section/info-section.component.scss","./src/app/info/info-section/info-section.component.ts","./src/app/info/info.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkF;AAC7B;AACrD;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,sBAAsB,OAAO,mDAAK,EAAE;AACpC;AACA;AACA,CAAC;AACwB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAoH;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0EAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,yDAAyD;AACzD,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,uBAAuB,OAAO,mDAAK,EAAE;AACrC;AACA;AACA,CAAC;AACiC;AAClC;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AAC8B;AAC/B,8B;;;;;;;;;;;;AC7GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkF;AAC7B;AACrD;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,qBAAqB,OAAO,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","file":"home-home-module-es5.js","sourcesContent":["import { NgModule, Component, Directive, ElementRef, Input } from \"@angular/core\";\nimport { getAttributes } from \"@carbon/icon-helpers\";\nvar Application32 = /** @class */ (function () {\n    function Application32() {\n        this.focusable = false;\n    }\n    Application32.decorators = [\n        { type: Component, args: [{\n                    selector: \"ibm-icon-application32\",\n                    template: \"\\n    <svg\\n      ibmIconApplication32\\n      [ariaLabel]=\\\"ariaLabel\\\"\\n      [ariaLabelledby]=\\\"ariaLabelledby\\\"\\n      [ariaHidden]=\\\"ariaHidden\\\"\\n      [title]=\\\"title\\\"\\n      [isFocusable]=\\\"focusable\\\"\\n      [attr.class]=\\\"innerClass\\\">\\n    </svg>\\n  \"\n                },] },\n    ];\n    Application32.propDecorators = {\n        ariaLabel: [{ type: Input }],\n        ariaLabelledby: [{ type: Input }],\n        ariaHidden: [{ type: Input }],\n        title: [{ type: Input }],\n        focusable: [{ type: Input }],\n        innerClass: [{ type: Input }]\n    };\n    return Application32;\n}());\nexport { Application32 };\nvar Application32Directive = /** @class */ (function () {\n    function Application32Directive(elementRef) {\n        this.elementRef = elementRef;\n        this.isFocusable = false;\n    }\n    Application32Directive.prototype.ngAfterViewInit = function () {\n        var svg = this.elementRef.nativeElement;\n        svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n        var domParser = new DOMParser();\n        var rawSVG = \"<svg focusable=\\\"false\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" style=\\\"will-change: transform;\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\" aria-hidden=\\\"true\\\"><path d=\\\"M16 18H6a2 2 0 0 1-2-2V6A2 2 0 0 1 6 4H16a2 2 0 0 1 2 2V16A2 2 0 0 1 16 18zM6 6V16H16V6zM26 12v4H22V12h4m0-2H22a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V12a2 2 0 0 0-2-2zM26 22v4H22V22h4m0-2H22a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V22a2 2 0 0 0-2-2zM16 22v4H12V22h4m0-2H12a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2V22a2 2 0 0 0-2-2z\\\"></path></svg>\";\n        var svgElement = domParser.parseFromString(rawSVG, \"image/svg+xml\").documentElement;\n        var node = svgElement.firstChild;\n        while (node) {\n            // importNode makes a clone of the node\n            // this ensures we keep looping over the nodes in the parsed document\n            svg.appendChild(svg.ownerDocument.importNode(node, true));\n            node = node.nextSibling;\n        }\n        var attributes = getAttributes({\n            width: 32,\n            height: 32,\n            viewBox: \"0 0 32 32\",\n            title: this.title,\n            \"aria-label\": this.ariaLabel,\n            \"aria-labelledby\": this.ariaLabelledby,\n            \"aria-hidden\": this.ariaHidden,\n            focusable: this.isFocusable.toString()\n        });\n        var attrKeys = Object.keys(attributes);\n        for (var i = 0; i < attrKeys.length; i++) {\n            var key = attrKeys[i];\n            var value = attributes[key];\n            if (key === \"title\") {\n                continue;\n            }\n            if (value) {\n                svg.setAttribute(key, value);\n            }\n        }\n        if (attributes.title) {\n            var title = document.createElement(\"title\");\n            title.textContent = attributes.title;\n            Application32Directive.titleIdCounter++;\n            title.setAttribute(\"id\", \"application32-\" + Application32Directive.titleIdCounter);\n            svg.appendChild(title);\n            svg.setAttribute(\"aria-labelledby\", \"application32-\" + Application32Directive.titleIdCounter);\n        }\n    };\n    Application32Directive.titleIdCounter = 0;\n    Application32Directive.decorators = [\n        { type: Directive, args: [{\n                    selector: \"[ibmIconApplication32]\"\n                },] },\n    ];\n    /** @nocollapse */\n    Application32Directive.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    Application32Directive.propDecorators = {\n        ariaLabel: [{ type: Input }],\n        ariaLabelledby: [{ type: Input }],\n        ariaHidden: [{ type: Input }],\n        title: [{ type: Input }],\n        isFocusable: [{ type: Input }]\n    };\n    return Application32Directive;\n}());\nexport { Application32Directive };\nvar Application32Module = /** @class */ (function () {\n    function Application32Module() {\n    }\n    Application32Module.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        Application32,\n                        Application32Directive\n                    ],\n                    exports: [\n                        Application32,\n                        Application32Directive\n                    ]\n                },] },\n    ];\n    return Application32Module;\n}());\nexport { Application32Module };\n//# sourceMappingURL=32.js.map","import { NgModule, Component, Directive, ElementRef, Input } from \"@angular/core\";\nimport { getAttributes } from \"@carbon/icon-helpers\";\nvar Globe32 = /** @class */ (function () {\n    function Globe32() {\n        this.focusable = false;\n    }\n    Globe32.decorators = [\n        { type: Component, args: [{\n                    selector: \"ibm-icon-globe32\",\n                    template: \"\\n    <svg\\n      ibmIconGlobe32\\n      [ariaLabel]=\\\"ariaLabel\\\"\\n      [ariaLabelledby]=\\\"ariaLabelledby\\\"\\n      [ariaHidden]=\\\"ariaHidden\\\"\\n      [title]=\\\"title\\\"\\n      [isFocusable]=\\\"focusable\\\"\\n      [attr.class]=\\\"innerClass\\\">\\n    </svg>\\n  \"\n                },] },\n    ];\n    Globe32.propDecorators = {\n        ariaLabel: [{ type: Input }],\n        ariaLabelledby: [{ type: Input }],\n        ariaHidden: [{ type: Input }],\n        title: [{ type: Input }],\n        focusable: [{ type: Input }],\n        innerClass: [{ type: Input }]\n    };\n    return Globe32;\n}());\nexport { Globe32 };\nvar Globe32Directive = /** @class */ (function () {\n    function Globe32Directive(elementRef) {\n        this.elementRef = elementRef;\n        this.isFocusable = false;\n    }\n    Globe32Directive.prototype.ngAfterViewInit = function () {\n        var svg = this.elementRef.nativeElement;\n        svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n        var domParser = new DOMParser();\n        var rawSVG = \"<svg focusable=\\\"false\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" style=\\\"will-change: transform;\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\" aria-hidden=\\\"true\\\"><path d=\\\"M14,4a7,7,0,1,1-7,7,7,7,0,0,1,7-7m0-2a9,9,0,1,0,9,9A9,9,0,0,0,14,2Z\\\"></path><path d=\\\"M28,11a13.92,13.92,0,0,0-4.11-9.89L22.48,2.52a12,12,0,0,1-16.92,17l0,0L4.11,20.89A13.92,13.92,0,0,0,14,25v3H10v2H20V28H16V24.84A14,14,0,0,0,28,11Z\\\"></path></svg>\";\n        var svgElement = domParser.parseFromString(rawSVG, \"image/svg+xml\").documentElement;\n        var node = svgElement.firstChild;\n        while (node) {\n            // importNode makes a clone of the node\n            // this ensures we keep looping over the nodes in the parsed document\n            svg.appendChild(svg.ownerDocument.importNode(node, true));\n            node = node.nextSibling;\n        }\n        var attributes = getAttributes({\n            width: 32,\n            height: 32,\n            viewBox: \"0 0 32 32\",\n            title: this.title,\n            \"aria-label\": this.ariaLabel,\n            \"aria-labelledby\": this.ariaLabelledby,\n            \"aria-hidden\": this.ariaHidden,\n            focusable: this.isFocusable.toString()\n        });\n        var attrKeys = Object.keys(attributes);\n        for (var i = 0; i < attrKeys.length; i++) {\n            var key = attrKeys[i];\n            var value = attributes[key];\n            if (key === \"title\") {\n                continue;\n            }\n            if (value) {\n                svg.setAttribute(key, value);\n            }\n        }\n        if (attributes.title) {\n            var title = document.createElement(\"title\");\n            title.textContent = attributes.title;\n            Globe32Directive.titleIdCounter++;\n            title.setAttribute(\"id\", \"globe32-\" + Globe32Directive.titleIdCounter);\n            svg.appendChild(title);\n            svg.setAttribute(\"aria-labelledby\", \"globe32-\" + Globe32Directive.titleIdCounter);\n        }\n    };\n    Globe32Directive.titleIdCounter = 0;\n    Globe32Directive.decorators = [\n        { type: Directive, args: [{\n                    selector: \"[ibmIconGlobe32]\"\n                },] },\n    ];\n    /** @nocollapse */\n    Globe32Directive.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    Globe32Directive.propDecorators = {\n        ariaLabel: [{ type: Input }],\n        ariaLabelledby: [{ type: Input }],\n        ariaHidden: [{ type: Input }],\n        title: [{ type: Input }],\n        isFocusable: [{ type: Input }]\n    };\n    return Globe32Directive;\n}());\nexport { Globe32Directive };\nvar Globe32Module = /** @class */ (function () {\n    function Globe32Module() {\n    }\n    Globe32Module.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        Globe32,\n                        Globe32Directive\n                    ],\n                    exports: [\n                        Globe32,\n                        Globe32Directive\n                    ]\n                },] },\n    ];\n    return Globe32Module;\n}());\nexport { Globe32Module };\n//# sourceMappingURL=32.js.map","import { NgModule, Component, Directive, ElementRef, Input } from \"@angular/core\";\nimport { getAttributes } from \"@carbon/icon-helpers\";\nvar PersonFavorite32 = /** @class */ (function () {\n    function PersonFavorite32() {\n        this.focusable = false;\n    }\n    PersonFavorite32.decorators = [\n        { type: Component, args: [{\n                    selector: \"ibm-icon-person-favorite32\",\n                    template: \"\\n    <svg\\n      ibmIconPersonFavorite32\\n      [ariaLabel]=\\\"ariaLabel\\\"\\n      [ariaLabelledby]=\\\"ariaLabelledby\\\"\\n      [ariaHidden]=\\\"ariaHidden\\\"\\n      [title]=\\\"title\\\"\\n      [isFocusable]=\\\"focusable\\\"\\n      [attr.class]=\\\"innerClass\\\">\\n    </svg>\\n  \"\n                },] },\n    ];\n    PersonFavorite32.propDecorators = {\n        ariaLabel: [{ type: Input }],\n        ariaLabelledby: [{ type: Input }],\n        ariaHidden: [{ type: Input }],\n        title: [{ type: Input }],\n        focusable: [{ type: Input }],\n        innerClass: [{ type: Input }]\n    };\n    return PersonFavorite32;\n}());\nexport { PersonFavorite32 };\nvar PersonFavorite32Directive = /** @class */ (function () {\n    function PersonFavorite32Directive(elementRef) {\n        this.elementRef = elementRef;\n        this.isFocusable = false;\n    }\n    PersonFavorite32Directive.prototype.ngAfterViewInit = function () {\n        var svg = this.elementRef.nativeElement;\n        svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n        var domParser = new DOMParser();\n        var rawSVG = \"<svg focusable=\\\"false\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" style=\\\"will-change: transform;\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 32 32\\\" aria-hidden=\\\"true\\\"><path d=\\\"M10 31H6a2.0059 2.0059 0 0 1-2-2V22a2.0059 2.0059 0 0 1-2-2V14a2.9465 2.9465 0 0 1 3-3h6a2.9465 2.9465 0 0 1 3 3v6a2.0059 2.0059 0 0 1-2 2v7A2.0059 2.0059 0 0 1 10 31zM5 13a.9448.9448 0 0 0-1 1v6H6v9h4V20h2V14a.9448.9448 0 0 0-1-1zM8 10a4 4 0 1 1 4-4A4.0045 4.0045 0 0 1 8 10zM8 4a2 2 0 1 0 2 2A2.002 2.002 0 0 0 8 4zM28.7663 4.2558A4.2121 4.2121 0 0 0 23 4.0321a4.2121 4.2121 0 0 0-5.7663.2237 4.319 4.319 0 0 0 0 6.0447L22.998 16.14 23 16.1376l.002.0019 5.7643-5.839A4.319 4.319 0 0 0 28.7663 4.2558zM27.342 8.8948l-4.34 4.3973L23 13.29l-.002.002-4.34-4.3973a2.3085 2.3085 0 0 1 0-3.2338 2.2639 2.2639 0 0 1 3.1561 0l1.181 1.2074L23 6.8634l.0049.005 1.181-1.2074a2.2639 2.2639 0 0 1 3.1561 0A2.3085 2.3085 0 0 1 27.342 8.8948z\\\"></path></svg>\";\n        var svgElement = domParser.parseFromString(rawSVG, \"image/svg+xml\").documentElement;\n        var node = svgElement.firstChild;\n        while (node) {\n            // importNode makes a clone of the node\n            // this ensures we keep looping over the nodes in the parsed document\n            svg.appendChild(svg.ownerDocument.importNode(node, true));\n            node = node.nextSibling;\n        }\n        var attributes = getAttributes({\n            width: 32,\n            height: 32,\n            viewBox: \"0 0 32 32\",\n            title: this.title,\n            \"aria-label\": this.ariaLabel,\n            \"aria-labelledby\": this.ariaLabelledby,\n            \"aria-hidden\": this.ariaHidden,\n            focusable: this.isFocusable.toString()\n        });\n        var attrKeys = Object.keys(attributes);\n        for (var i = 0; i < attrKeys.length; i++) {\n            var key = attrKeys[i];\n            var value = attributes[key];\n            if (key === \"title\") {\n                continue;\n            }\n            if (value) {\n                svg.setAttribute(key, value);\n            }\n        }\n        if (attributes.title) {\n            var title = document.createElement(\"title\");\n            title.textContent = attributes.title;\n            PersonFavorite32Directive.titleIdCounter++;\n            title.setAttribute(\"id\", \"person-favorite32-\" + PersonFavorite32Directive.titleIdCounter);\n            svg.appendChild(title);\n            svg.setAttribute(\"aria-labelledby\", \"person-favorite32-\" + PersonFavorite32Directive.titleIdCounter);\n        }\n    };\n    PersonFavorite32Directive.titleIdCounter = 0;\n    PersonFavorite32Directive.decorators = [\n        { type: Directive, args: [{\n                    selector: \"[ibmIconPersonFavorite32]\"\n                },] },\n    ];\n    /** @nocollapse */\n    PersonFavorite32Directive.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    PersonFavorite32Directive.propDecorators = {\n        ariaLabel: [{ type: Input }],\n        ariaLabelledby: [{ type: Input }],\n        ariaHidden: [{ type: Input }],\n        title: [{ type: Input }],\n        isFocusable: [{ type: Input }]\n    };\n    return PersonFavorite32Directive;\n}());\nexport { PersonFavorite32Directive };\nvar PersonFavorite32Module = /** @class */ (function () {\n    function PersonFavorite32Module() {\n    }\n    PersonFavorite32Module.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        PersonFavorite32,\n                        PersonFavorite32Directive\n                    ],\n                    exports: [\n                        PersonFavorite32,\n                        PersonFavorite32Directive\n                    ]\n                },] },\n    ];\n    return PersonFavorite32Module;\n}());\nexport { PersonFavorite32Module };\n//# sourceMappingURL=32.js.map","module.exports = \"<div ibmGrid class=\\\"bx--grid--full-width landing-page\\\">\\n\\t<div ibmRow class=\\\"landing-page__banner\\\">\\n\\t\\t<div ibmCol [columnNumbers]=\\\"{'lg': 16}\\\">\\n\\t\\t\\t<ibm-breadcrumb noTrailingSlash=\\\"true\\\" ariaLabel=\\\"Page navigation\\\">\\n\\t\\t\\t\\t<ibm-breadcrumb-item href=\\\"/\\\">\\n\\t\\t\\t\\t\\tGetting started\\n\\t\\t\\t\\t</ibm-breadcrumb-item>\\n\\t\\t\\t</ibm-breadcrumb>\\n\\t\\t\\t<h1 class=\\\"landing-page__heading\\\">\\n\\t\\t\\t\\tDesign &amp; build with Carbon\\n\\t\\t\\t</h1>\\n\\t\\t</div>\\n\\t</div>\\n\\t<div ibmRow class=\\\"landing-page__r2\\\">\\n\\t\\t<div ibmCol class=\\\"bx--no-gutter\\\">\\n\\t\\t\\t<ibm-tabs ariaLabel=\\\"Tab navigation\\\">\\n\\t\\t\\t\\t<ibm-tab heading=\\\"About\\\">\\n\\t\\t\\t\\t\\t<div ibmGrid class=\\\"bx--grid--no-gutter bx--grid--full-width\\\">\\n\\t\\t\\t\\t\\t\\t<div ibmRow class=\\\"landing-page__tab-content\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div ibmCol [columnNumbers]=\\\"{'md': 4, 'lg': 7}\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<h2 class=\\\"landing-page__subheading\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tWhat is Carbon?\\n\\t\\t\\t\\t\\t\\t\\t\\t</h2>\\n\\t\\t\\t\\t\\t\\t\\t\\t<p class=\\\"landing-page__p\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tCarbon is IBM’s open-source design system for digital\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tproducts and experiences. With the IBM Design Language\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tas its foundation, the system consists of working code,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdesign tools and resources, human interface guidelines,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tand a vibrant community of contributors.\\n\\t\\t\\t\\t\\t\\t\\t\\t</p>\\n\\t\\t\\t\\t\\t\\t\\t\\t<button ibmButton>Learn more</button>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div ibmCol class=\\\"bx--offset-lg-1\\\" [columnNumbers]=\\\"{'md': 4, 'lg': 8}\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<img\\n\\t\\t\\t\\t\\t\\t\\t\\tclass=\\\"landing-page__illo\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tsrc=\\\"../../../assets/tab-illo.png\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\talt=\\\"Carbon illustration\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ibm-tab>\\n\\t\\t\\t\\t<ibm-tab heading=\\\"Design\\\">\\n\\t\\t\\t\\t\\t<div ibmGrid class=\\\"bx--grid--no-gutter bx--grid--full-width\\\">\\n\\t\\t\\t\\t\\t\\t<div ibmRow class=\\\"landing-page__tab-content\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div ibmCol [columnNumbers]=\\\"{'lg': 16}\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\tRapidly build beautiful and accessible experiences. The Carbon kit contains all resources you need to get started.\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ibm-tab>\\n\\t\\t\\t\\t<ibm-tab heading=\\\"Develop\\\">\\n\\t\\t\\t\\t\\t<div ibmGrid class=\\\"bx--grid--no-gutter bx--grid--full-width\\\">\\n\\t\\t\\t\\t\\t\\t<div ibmRow class=\\\"landing-page__tab-content\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div ibmCol [columnNumbers]=\\\"{'lg': 16}\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\tCarbon provides styles and components in Vanilla, React, Angular, and Vue for anyone building on the web.\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</ibm-tab>\\n\\t\\t\\t</ibm-tabs>\\n\\t\\t</div>\\n\\t</div>\\n    <app-info-section></app-info-section>\\n</div>\\n\"","module.exports = \"<div class=\\\"info-card\\\">\\n    <h4 class=\\\"info-card__heading\\\">\\n      {{splitHeading[0]}}\\n      <strong>{{splitHeading[1]}}</strong>\\n    </h4>\\n    <div class=\\\"info-card__body\\\">{{content}}</div>\\n    <div class=\\\"info-card__icon\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n  \"","module.exports = \"<section ibmRow class=\\\"info-section info-section__r1\\\">\\n    <div ibmCol [columnNumbers]=\\\"{'md': 4, 'lg': 4}\\\">\\n      <h3 class=\\\"info-section__heading\\\">{{heading}}</h3>\\n    </div>\\n    <app-info-card\\n      ibmCol\\n      [columnNumbers]=\\\"{'md': 4, 'lg': 4}\\\"\\n      [heading]=\\\"items[0].heading\\\"\\n      [content]=\\\"items[0].content\\\"\\n    >\\n      <ibm-icon-person-favorite32></ibm-icon-person-favorite32>\\n    </app-info-card>\\n    <app-info-card\\n      ibmCol\\n      [columnNumbers]=\\\"{'md': 4, 'lg': 4}\\\"\\n      [heading]=\\\"items[1].heading\\\"\\n      [content]=\\\"items[1].content\\\"\\n    >\\n      <ibm-icon-application32></ibm-icon-application32>\\n    </app-info-card>\\n    <app-info-card\\n      ibmCol\\n      [columnNumbers]=\\\"{'md': 4, 'lg': 4}\\\"\\n      [heading]=\\\"items[2].heading\\\"\\n      [content]=\\\"items[2].content\\\"\\n    >\\n      <ibm-icon-globe32></ibm-icon-globe32>\\n    </app-info-card>\\n  </section>\\n  \\n  \\n  \\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LandingPageComponent } from './landing-page/landing-page.component';\n\n\nconst routes: Routes = [{\n\tpath: '',\n\tcomponent: LandingPageComponent\n}];\n\n@NgModule({\n\timports: [RouterModule.forChild(routes)],\n\texports: [RouterModule]\n})\nexport class HomeRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InfoModule } from './../info/info.module';\nimport { HomeRoutingModule } from './home-routing.module';\nimport { LandingPageComponent } from './landing-page/landing-page.component';\nimport {\n\tBreadcrumbModule,\n\tButtonModule,\n\tGridModule,\n\tTabsModule\n} from 'carbon-components-angular';\n\n@NgModule({\n\tdeclarations: [LandingPageComponent],\n\timports: [\n\t\tCommonModule,\n\t\tHomeRoutingModule,\n\t\tBreadcrumbModule,\n\t\tButtonModule,\n\t\tGridModule,\n\t\tTabsModule,\n\t\tInfoModule\n\t]\n})\nexport class HomeModule { }\n","module.exports = \".landing-page__illo {\\n  max-width: 100%; }\\n\\n.landing-page__banner {\\n  padding-top: 1rem;\\n  padding-bottom: 8rem; }\\n\\n.landing-page__banner {\\n  padding-top: 1rem;\\n  padding-bottom: 8rem;\\n  background-color: #f4f4f4;\\n  position: relative; }\\n\\n.landing-page__banner::before {\\n    content: '';\\n    position: absolute;\\n    left: -1rem;\\n    top: 0;\\n    right: -1rem;\\n    bottom: 0;\\n    background: #f4f4f4;\\n    z-index: -1; }\\n\\n.landing-page__heading {\\n  font-size: 2rem;\\n  font-weight: 400;\\n  line-height: 2.5rem;\\n  letter-spacing: 0; }\\n\\n.landing-page__r2 {\\n  margin-top: -2.5rem; }\\n\\n.landing-page__tab-content {\\n  padding-top: 4rem;\\n  padding-bottom: 4rem; }\\n\\n.landing-page__subheading {\\n  font-size: 1.25rem;\\n  font-weight: 400;\\n  line-height: 1.625rem;\\n  letter-spacing: 0;\\n  font-weight: 600; }\\n\\n.landing-page__p {\\n  font-size: 1.25rem;\\n  font-weight: 400;\\n  line-height: 1.625rem;\\n  letter-spacing: 0;\\n  margin-top: 1.5rem;\\n  margin-bottom: 2.5rem; }\\n\\n@media (min-width: 321px) and (max-width: 42rem) {\\n    .landing-page__p {\\n      max-width: 75%; } }\\n\\n.landing-page__r3 {\\n  padding-top: 3rem;\\n  padding-bottom: 3rem;\\n  background-color: #f4f4f4;\\n  position: relative; }\\n\\n.landing-page__r3::before {\\n    content: '';\\n    position: absolute;\\n    left: -1rem;\\n    top: 0;\\n    right: -1rem;\\n    bottom: 0;\\n    background: #f4f4f4;\\n    z-index: -1; }\\n\\n.landing-page__label {\\n  font-size: 0.875rem;\\n  font-weight: 600;\\n  line-height: 1.125rem;\\n  letter-spacing: 0.16px; }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n\tselector: 'app-landing-page',\n\ttemplateUrl: './landing-page.component.html',\n\tstyleUrls: ['./landing-page.component.scss']\n})\nexport class LandingPageComponent implements OnInit {\n\n\tconstructor() { }\n\n\tngOnInit() {\n\t}\n\n}\n","module.exports = \".bx--text-truncate--end {\\n  width: 100%;\\n  display: inline-block;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  overflow: hidden; }\\n\\n.bx--text-truncate--front {\\n  width: 100%;\\n  display: inline-block;\\n  direction: rtl;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  overflow: hidden; }\\n\\n.info-card {\\n  display: flex;\\n  flex-direction: column; }\\n\\n.info-card .info-card__heading {\\n    font-size: 1.25rem;\\n    font-weight: 400;\\n    line-height: 1.625rem;\\n    letter-spacing: 0; }\\n\\n.info-card .info-card__body {\\n    margin-top: 1.5rem;\\n    flex-grow: 1;\\n    font-size: 0.875rem;\\n    font-weight: 400;\\n    line-height: 1.25rem;\\n    letter-spacing: 0.16px; }\\n\\n@media (min-width: 321px) and (max-width: 42rem) {\\n      .info-card .info-card__body {\\n        max-width: 75%; } }\\n\\n.info-card .info-card__icon {\\n    margin-top: 3rem; }\\n\\n@media (min-width: 66rem) {\\n    .info-card .info-card__icon {\\n      margin-top: 6rem; } }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n\tselector: 'app-info-card',\n\ttemplateUrl: './info-card.component.html',\n\tstyleUrls: ['./info-card.component.scss']\n})\nexport class InfoCardComponent implements OnInit {\n\n\t@Input() heading;\n\t@Input() content;\n\tsplitHeading;\n\n\tconstructor() { }\n\n\tngOnInit() {\n\t// create the split title to get bold styles\n\tthis.splitHeading = this.createArrayFromPhrase(this.heading);\n\t}\n\n\t// Take in a phrase and separate the third word in an array\n\tcreateArrayFromPhrase(phrase) {\n\t\tconst splitPhrase = phrase.split(' ');\n\t\tconst thirdWord = splitPhrase.pop();\n\t\treturn [splitPhrase.join(' '), thirdWord];\n\t}\n}\n","module.exports = \".info-section {\\n  background-color: #f4f4f4;\\n  position: relative;\\n  display: flex;\\n  height: -webkit-fit-content;\\n  height: -moz-fit-content;\\n  height: fit-content; }\\n  .info-section::before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    left: -1rem;\\n    top: 0;\\n    right: -1rem;\\n    bottom: 0;\\n    background: #f4f4f4;\\n    z-index: -1; }\\n  .info-section.info-section__r1 {\\n    padding-top: 3rem;\\n    padding-bottom: 3rem;\\n    height: auto; }\\n  .info-section .info-section__heading {\\n    font-size: 0.875rem;\\n    font-weight: 600;\\n    line-height: 1.125rem;\\n    letter-spacing: 0.16px;\\n    font-weight: 600; }\\n  .info-section app-info-card {\\n    margin-top: 3rem; }\\n  @media (max-width: 42rem) {\\n    .info-section app-info-card:not(:nth-child(2)) {\\n      border-top: 1px solid #e0e0e0;\\n      padding-top: 3rem; } }\\n  @media (min-width: 42rem) {\\n    .info-section app-info-card:nth-child(odd) {\\n      border-left: 1px solid #e0e0e0; } }\\n  @media (min-width: 66rem) {\\n    .info-section app-info-card {\\n      margin-top: 0;\\n      border-left: 1px solid #e0e0e0; } }\\n\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { Component, OnInit } from '@angular/core';\nimport * as data from '../info.json';\n\n@Component({\n\tselector: 'app-info-section',\n\ttemplateUrl: './info-section.component.html',\n\tstyleUrls: ['./info-section.component.scss']\n})\nexport class InfoSectionComponent implements OnInit {\n\n\theading = data.title;\n\titems = data.items;\n\n\tconstructor() { }\n\n\tngOnInit() {\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InfoCardComponent } from './info-card/info-card.component';\nimport { InfoSectionComponent } from './info-section/info-section.component';\n\nimport { GridModule } from 'carbon-components-angular';\nimport { PersonFavorite32Module } from '@carbon/icons-angular/lib/person--favorite/32';\nimport { Globe32Module } from '@carbon/icons-angular/lib/globe/32';\nimport { Application32Module } from '@carbon/icons-angular/lib/application/32';\n\n\n@NgModule({\n\tdeclarations: [InfoCardComponent, InfoSectionComponent],\n\timports: [\n\t\tCommonModule,\n\t\tGridModule,\n\t\tPersonFavorite32Module,\n\t\tGlobe32Module,\n\t\tApplication32Module\n\t],\n\texports:  [InfoCardComponent, InfoSectionComponent]\n})\nexport class InfoModule { }\n"],"sourceRoot":"webpack:///"}